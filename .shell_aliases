# NE PAS EDITER
# Source: https://github.com/SamK/dotfiles/
# Contient les aliases et fonctions aussi

# TOC:
#
# 1. color support
# 2. correction aliases
# 3. daily aliases and commands
# 4. commandes métier
# 5. Git
# 6. system
# 7. local aliases

#
# 1. color support
#

# colors https://en.wikipedia.org/wiki/ANSI_escape_code#Colors
local RED='\033[0;31m'
local CYAN='\033[0;36m'
local NOCOLOR='\033[0m'

if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
    alias cz='(ccze -m ansi | less -MnFRX)'
fi

colorz () {
    perl -CADS -lwe '
    my $block = shift || (chr(0x2588) x 3);
    for (["", 0], ["1;", 0], ["", 8], ["1;", 8]) {
        my ($bold, $offset) = @$_;
        my @range = map $offset + $_, 0..7;
        printf "%s %-6s ", $bold ? "bold" : "norm", "$range[0]-$range[-1]";
        print map("\e[${bold}38;5;${_}m$block", @range), "\e[0m"
    }
    ' "$@"
}

function lesscolor () {
    if [ -x /usr/bin/dircolors ]; then
        ccze -A < "$1" | less -R;
    else
        echo "Colors do not seem to be supported on this terminal." >&2
        return 127
    fi
}

# `man` use colors
man() {
    env \
    LESS_TERMCAP_mb=$'\e[01;31m' \
    LESS_TERMCAP_md=$'\e[01;31m' \
    LESS_TERMCAP_me=$'\e[0m' \
    LESS_TERMCAP_se=$'\e[0m' \
    LESS_TERMCAP_so=$'\e[01;44;33m' \
    LESS_TERMCAP_ue=$'\e[0m' \
    LESS_TERMCAP_us=$'\e[01;32m' \
    man "$@"
}

#
# 2. correction aliases
#
alias gerp='grep'
alias iv='vi'
alias vu='vi'
alias vo='vi'
alias sudp='sudo'

#
# 3. daily aliases and commands
#

alias ll='ls -lhF'
alias tree='LC_COLLATE=C tree --dirsfirst -F'
alias l='ls --color=auto -hlF --group-directories-first'
alias la='LC_COLLATE="C" l -A'
alias cp="cp -i"
alias mv="mv -i"
alias cal='LC_TIME=fr_CH.UTF-8 ncal -bM'

# cl = cd + ls
function cl() { cd "$@" && /bin/ls -lh --color ;}

alias tmux='TERM=xterm-256color /usr/bin/tmux'

tmux-reattach () {
    AS=$(tmux ls -F '#{session_attached} #{session_name}' | grep -v '^0' | cut -d ' ' -f 2-)
    tmux a -d -t "$AS"
}

# find
findxsvn () {
    local searchdir=$1
    [ -n "$searchdir" ] && shift
    find $searchdir ! \( -path '*/.svn' -o -path '*/.svn/*' \) $@
}

findxgit () {
    local searchdir=$1
    [ -n "$searchdir" ] && shift
    find $searchdir ! \( -path '*/.git' -o -path '*/.git/*' \) $@
}

function dudir() {
    du -hs $( ls -A $1 ) | sort -h
}

# When using sudo, use alias expansion (otherwise sudo ignores your aliases)
alias sudo='sudo '

# cd + ls = cl
function cl() { cd "$@" && /bin/ls -lh --color  ;}

# Remove comments from config file
alias cleanconf="sed -e 's/[#;].*//;/^\s*$/d' "$@""

# desktop application "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias xalert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# nice history (zsh only)
alias hist='fc -liD 1 | less -R +G'

#
# 4. commandes métier
#

# subversion
svn-diff() { svn diff "${@}" | colordiff | less -R; }

# configure git selon un fichier local
gitconfig-local () {
    cdir=$HOME
    prefix='.gitconfig.local'
    current=$(readlink $cdir/$prefix)
    if [ -z "$1" ]; then
        for filename in $( /bin/ls -1 $cdir/${prefix}.* ); do
            f=$( basename $filename )
            f=$( echo "$f" | sed "s/$prefix//" | sed 's/^\.//' )
            echo -n "$f"
            if [[ "$filename" == "$current" ]]; then
                echo -n '*'
            fi
            echo ''
        done
    else
        if [ ! -f "${cdir}/${prefix}.${1}" ] ; then
            echo "Notice: The file "${cdir}/${prefix}.${1}" does not exist." >&2
        fi
        ln -f  -s ${cdir}/${prefix}.${1} ${cdir}/.gitconfig.local
    fi
}

# jq dans less
function jqless (){
    jq -C $* | less -R
}

# tree dans less
function treeless(){
    tree -C $* | less
}

# Packer
alias packer="docker run -v `pwd`:/workspace -w /workspace -e PACKER_PLUGIN_PATH=/workspace/.packer.d/plugins hashicorp/packer:light"
alias packer-1.8.3="docker run -v `pwd`:/workspace -w /workspace -e PACKER_PLUGIN_PATH=/workspace/.packer.d/plugins hashicorp/packer:1.8.3"

# yaml validation
# requires a file as argument
function yaml-check-rby { ruby -e "require 'yaml'; YAML.load_file('$1')"; }

# validate yaml
alias yaml-check='python -c "import yaml,sys;yaml.safe_load(sys.stdin)"'
# convert from yaml to python
alias yaml-pprint='python -c "import yaml,pprint,sys;pprint.pprint(yaml.safe_load(sys.stdin))"'
# read yaml and print yaml
alias yaml-dump='python -c "import yaml,sys;print(yaml.dump((yaml.safe_load(sys.stdin))))"'

# json validation
alias json-check='json_pp'

alias _ansible-playbook-name='python3 -c "import yaml,sys;y=yaml.safe_load(sys.stdin)[0]; print(y[\"name\"] if \"name\" in y else \"\")"'
function ansible-playbooks-describe() {
    for F in $*; do
        echo -n "${CYAN}$F${NOCOLOR}: "
        _ansible-playbook-name < $F
        echo
        grep --color=never '^\#.*$' < $F | sed  -E 's/^# ?//'
    done
}

function venvs-path(){
    echo ~/.virtualenvs
}

function venvs-list(){
    find $(venvs-path) -mindepth 1 -maxdepth 1 -type d -exec basename {} \;
}

# create virtualenv
function venv-create (){
    local venv_path=$(venvs-path)/"$1"
    python3 -m venv $venv_path
    [ -f "${venv_path}/CACHEDIR.TAG" ] || echo 'Signature: 8a477f597d28d172789f06886806bc55' > "$(venvs-path)/CACHEDIR.TAG"
}
# activate virtualenv
function venv-activate() {
    local venv_path=$(venvs-path)/"$1"
    . $venv_path/bin/activate || ( echo ; echo Available virtualenvs: ; venvs-list ; return 1)
}

function venv-delete() {
    local venv_path=$(venvs-path)/"$1"
    [ -n "$1" ] && [ -d "$venv_path" ] && /bin/rm -rf $venv_path ||
    ( echo Available virtualenvs: ; venvs-list ; return 1 )
}

alias venv-deactivate='deactivate'

_venv_activate() { _directories  -W $(venvs-path); }
_venv_delete() { _directories  -W $(venvs-path); }
compdef _venv_activate venv-activate
compdef _venv_delete venv-delete

function mitogen-activate(){
    export ANSIBLE_STRATEGY_PLUGINS=${VIRTUAL_ENV}/lib/python3.8/site-packages/ansible_mitogen/plugins/strategy
    export ANSIBLE_STRATEGY=mitogen_linear
}

function mitogen-deactivate(){
    unset ANSIBLE_STRATEGY_PLUGINS
    unset ANSIBLE_STRATEGY
}

#
# 5. Git
#

alias g='git'
alias qgit='git'
alias ggit='git'
alias gti='git'
# initalias a git repo with an empty commit
alias git-init='git init && git commit --allow-empty -m "Initial commit"'
# display the current branch name
alias git-branch='git rev-parse --abbrev-ref HEAD'
alias gapa="git add --patch"
alias gl="git lgl"
# reads a string from stdin and make it compatible with a branch name
alias git-name-branch="sed -r -e 's/[^A-Za-z0-9/\-]/ /g' -e 's/\s+/_/g' -e 's/^[^A-Za-z0-9]+//g' -e 's/[^a-zA-Z0-9]+$//g'"
                                 # remplacer les caracteres mal aimés par des espaces
                                                            # les espaces deviennent des underscore
                                                                           # Nettoyer le debut de la chaine
                                                                                                     # nettoyer la fin de la chaine

git-diff-raw(){
    COMMIT1=$1
    COMMIT2=$2
    diff <(git show --format=raw $COMMIT1) <(git show --format=raw $COMMIT2)
}

# gitlab: execute python-gitlab
# https://python-gitlab.readthedocs.io/en/stable/cli-usage.html
# https://python-gitlab.readthedocs.io/en/stable/cli-objects.html
alias  gitlab="docker run -it --rm -e GITLAB_URL=$GITLAB_URL -e GITLAB_PRIVATE_TOKEN=$GITLAB_PRIVATE_TOKEN registry.gitlab.com/python-gitlab/python-gitlab:latest"

# list my starred projects
alias gitlab-my-projects="gitlab -f id,name,web_url -o yaml project list --starred true --per-page 100"

# list all my branches
# but much slower than "gitlab-samkli mybr"
function gitlab-my-branches () {
    MY_NAME=$(gitlab -o json current-user get | jq -r .name)
    PROJECTS=$(gitlab -f id -o json project list --starred true --per-page 100| jq '.[].id')
    for PROJECT_ID in $PROJECTS; do
        # todo: produire un json valide
        gitlab -o json project-branch list --project-id $PROJECT_ID > /tmp/branches
        jq ".[] | select(.commit.author_name==\"$MY_NAME\" and .name!=\"master\")" < /tmp/branches > /tmp/my-branches
        jq ". | {name: .name, web_url: .web_url, project_name: \"$PROJECT_ID\"}" < /tmp/my-branches || cat /tmp/my-branches
        /bin/rm /tmp/branches /tmp/my-branches
    done
}

function git-search-and-replace(){
    local from=$1
    local to=$2
    git grep -l "$1"| xargs sed -i "s/$1/$2/g"
}

function git-prefetch(){
    # Do a git fetch --dry-run with no specific output
    # Return values:
    # 0: the remote branch must be upated
    # 1: the remote branch is up-to-date or maybe Git error
    # anything else: error

    local remote=${1:-origin}
    local branch=${2:-master}

    git fetch \
        --dry-run $remote $branch 2>/tmp/git-fetch-dry-run
    E=$?

    if [ "$E" != "0" ]; then
        >&2 cat /tmp/git-fetch-dry-run
        /bin/rm -f /tmp/git-fetch-dry-run
        return $E
    fi

    grep -q -E --color " ${remote}\/${branch}" /tmp/git-fetch-dry-run
    E=$?

    /bin/rm -f /tmp/git-fetch-dry-run

    [ "$E" = "0" ]

}

# network

alias stracenet="strace -f -e trace=network -s 10000"
alias resolveip="resolveip -s"
alias digs="dig +search"

ssh-agent-enable(){
    if ! ssh-add -l; then
        [ -n "$1" ] && KEY=$1 || KEY=~/.ssh/id_rsa
        eval $(ssh-agent)
        ssh-add $KEY
    fi
}

#
# 6. System
#

if [[ $(uname -r) == *"WSL2" ]]; then
    # /etc/sudoers.d/wsl2:
    # %adm ALL = NOPASSWD: /usr/sbin/service ssh *
    # %adm ALL = NOPASSWD: /usr/sbin/service docker *
    # %adm ALL = NOPASSWD: /usr/sbin/service cron *
    # %adm ALL = NOPASSWD: /usr/sbin/service rsyslog *
    service docker status || sudo service docker start
    service ssh status || sudo service ssh start
    service cron status || sudo service cron start
    service rsyslog status || sudo service rsyslog start
fi

#
# END
#
