#!/usr/bin/env python3
"""
Comment tester:
    pylint --module-rgx='.*' --max-line-length=120 gitlab-cli
    pycodestyle --max-line-length=120 --show-source --show-pep8 gitlab-cli
"""
import os
import sys
import textwrap
import argparse
# import pprint
import tabulate

import requests

__description__ = """
Un petit client pour voir les trucs en cours sur Gitlab.
Les variables d'environement suivantes sont requises:
    - GITLAB_TOKEN
    - GITLAB_URL
"""

__epilog__ = """
TODO:
    - Ajouter les projets perso par défaut (--personal, --no--personal)
    - Ajouter les params: --all, --no-all (impossible?!)
"""


class NoGitlabTokenError(Exception):
    """Raised when the user did not provide a token"""


class NoGitlabURLError(Exception):
    """Raised when the user did not provide a Gitlab URL"""


def get_projects(projects_url, projects_payload, headers):
    """ Return a list of Gitlab projects
    """
    response = requests.get(projects_url, params=projects_payload, headers=headers)
    response.raise_for_status()
    return response.json()


def get_mrs(gitlab_api_url, headers):
    """ Return a list of open MRs by me
    """
    url = '{}/merge_requests?state=opened'.format(gitlab_api_url)
    response = requests.get(url, headers=headers)
    response.raise_for_status()
    return response.json()


def get_branches(project_url, headers):
    """ Return a list of branches in a given project
    """
    url = "{}/repository/branches".format(project_url)
    response = requests.get(url, headers=headers)
    response.raise_for_status()
    return response.json()


def whoami(gitlab_api_url, headers):
    """ Return the current logged in user
    """
    url = "{}/user".format(gitlab_api_url)
    response = requests.get(url, headers=headers)
    response.raise_for_status()
    return response.json()


def get_config():
    """ Return the configuration
    """
    config = {
        'gitlab_token': os.environ.get('GITLAB_TOKEN'),
        'gitlab_url': os.environ.get('GITLAB_URL'),
        'projects_payload': {'starred': True},
        'ignored_branches': ['master']
    }
    # more values based on previous values
    config['gitlab_api_url'] = "{}/api/v4".format(config['gitlab_url'])
    config['headers'] = {'PRIVATE-TOKEN': config['gitlab_token']}
    config['projects_url'] = '{}/projects?starred=true'.format(config['gitlab_api_url'])
    return config


def parse_arguments():
    """ Parse the arguments given by the user
    """

    parser = argparse.ArgumentParser(description=__description__,
                                     epilog=textwrap.dedent(__epilog__),
                                     formatter_class=argparse.RawDescriptionHelpFormatter)
    subparsers = parser.add_subparsers(help='Quoi Chercher.', dest='item')

    projects = subparsers.add_parser('projects', aliases=['pr'], help='Affiche les projets')
    projects.set_defaults(item='projects')

    merge_requests = subparsers.add_parser('merge-requests', aliases=['mr'],
                                           help='Affiche les merge-request que tu as créé.')
    merge_requests.set_defaults(item='merge_requests')

    branches = subparsers.add_parser('branches', aliases=['br'], help='Affiche les branches dont tu es l\'auteur.')
    branches.set_defaults(item='branches')
    branches.add_argument('--name', help='filter par nom')
    return parser.parse_args()


def gitlab_mr(config):
    """ search for merge requests

        See: example and return values: https://docs.gitlab.com/ee/api/merge_requests.html#list-merge-requests
    """
    return get_mrs(config['gitlab_api_url'], config['headers'])


def gitlab_branches(projects, args, author, headers, ignored_branches):
    """ search for branches
    """

    data = []
    for project in projects:
        project_url = project['_links']['self']

        if args.name:
            # filter by branch name
            for branch in get_branches(project_url, headers):
                if args.name in branch['name']:
                    data.append({'project': project['name'], 'branch': branch['name'], 'web_url': branch['web_url']})
        else:
            for branch in get_branches(project_url, headers):
                if (
                        author['email'] == branch['commit']['author_email'] or
                        author['name'] == branch['commit']['committer_name'] or
                        author['name'] == branch['commit']['author_name']
                    ) and \
                     branch['name'] not in ignored_branches:
                    # pprint.pprint(branch)
                    data.append({'project': project['name'], 'branch': branch['name'], 'web_url': branch['web_url']})
    return data


def validate_config(config):
    """
    Validate the configuration and user input
    """
    if not config['gitlab_token']:
        raise NoGitlabTokenError
    if not config['gitlab_url']:
        raise NoGitlabURLError


def print_table(data, columns=None):
    """
    Print the data as a nice table
    # available titles:
    >>> print(data[0].keys())

    btw: panda works: https://stackoverflow.com/a/53831756
    >>> import pandas
    >>> print(pandas.DataFrame(data).reindex(columns=columns))
    """

    # limit case where no data is provided
    if not data:
        return

    # tabulate
    dataset = []
    if not columns:
        dataset = data
    else:
        for item in data:
            item2 = {}
            for key, value in item.items():
                if key in columns:
                    item2[key] = value
            dataset.append(item2)
    print(tabulate.tabulate(dataset, headers="keys"))


def main():
    """ Main function
    """
    config = get_config()
    args = parse_arguments()

    # validate input
    try:
        validate_config(config)
    except NoGitlabTokenError:
        print("ERROR: Missing environment variable 'GITLAB_TOKEN'", file=sys.stderr)
        sys.exit(127)
    except NoGitlabURLError:
        print("ERROR: Missing environment variable 'GITLAB_URL'", file=sys.stderr)
        sys.exit(127)

    # choose between action
    if args.item == "projects":
        projects = get_projects(config['projects_url'], config['projects_payload'], config['headers'])
        print_table(projects, ['id', 'name', 'web_url'])
    elif args.item == "branches":
        author = whoami(config['gitlab_api_url'], config['headers'])
        projects = get_projects(config['projects_url'], config['projects_payload'], config['headers'])
        data = gitlab_branches(projects, args, author, config['headers'], config['ignored_branches'])
        print_table(data)
    elif args.item == "merge_requests":
        data = gitlab_mr(config)
        print_table(data, ['id', 'title', 'web_url', 'source_branch'])
    else:
        raise Exception(f'Unknown argument: "{args.item}"')


if __name__ == '__main__':
    main()
