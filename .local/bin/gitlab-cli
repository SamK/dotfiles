#!/usr/bin/env python3
"""
Comment tester:
    pylint --disable=C0103 --max-line-length=120 gitlab-cli
"""

import os
import sys
import argparse
import requests
#import pprint

# imported vars
gitlab_token = os.environ['GITLAB_TOKEN']
gitlab_url = os.environ['GITLAB_URL']

# app vars
gitlab_api_url = "{}/api/v4".format(gitlab_url)
headers = {'PRIVATE-TOKEN': gitlab_token}
projects_payload = {'starred': True}
projects_url = '{}/projects?starred=true'.format(gitlab_api_url)
ignored_branches = ['master']

def get_projects():
    """ Return a list of Gitlab projects
    """
    r = requests.get(projects_url, params=projects_payload, headers=headers)
    r.raise_for_status()
    try:
        return r.json()
    except Exception:
        print(r.text)
        sys.exit(1)

def get_branches(project_url):
    """ Return a list of branches in a given project
    """
    url = "{}/repository/branches".format(project_url)
    r = requests.get(url, headers=headers)
    r.raise_for_status()
    try:
        return r.json()
    except Exception:
        print(r.text)
        sys.exit(1)

def whoami():
    """ Return the current logged in user
    """
    url = "{}/user".format(gitlab_api_url)
    r = requests.get(url, headers=headers)
    r.raise_for_status()
    try:
        return r.json()
    except Exception:
        print(r.text)
        sys.exit(1)

def parse_arguments(default_values):
    """ Parse user arguments
    """
    parser = argparse.ArgumentParser()

    group = parser.add_mutually_exclusive_group()
    group.add_argument('--author', action='store_true', help='notimlemented')
    group.add_argument('--branch', default=None , help='search by branch name')
    group.add_argument('--me', action='store_true', default=True, help='meme que dire "--author=\'<current user>\'"')
    # TODO: implementer --all
    parser.add_argument('--all', action='store_true', help='not implemented')
    return parser.parse_args()

def gitlab_branches(projects, args, author):
    """ The program starts here
    """

    # special case
    if args.all or args.author:
        raise NotImplementedError("Pas encore fait sorry")

    for project in projects:
        project_url=project['_links']['self']

        if args.branch:
            for branch in get_branches(project_url):
                if args.branch in branch['name']:
                    print("{}:{} {}".format(project['name'], branch['name'], branch['web_url']))
                    #pprint.pprint(branch)
        elif args.me:
            for branch in get_branches(project_url):
                if (
                        author['email'] == branch['commit']['author_email'] or
                        author['name'] == branch['commit']['committer_name'] or
                        author['name'] == branch['commit']['author_name']
                    ) and \
                    branch['name'] not in ignored_branches:
                    #pprint.pprint(branch)
                    print("{}:{} {}".format(project['name'], branch['name'], branch['web_url']))
        else:
            print("arg error.")
            sys.exit(127)


def main(default_values):
    """ Main function
    """
    args = parse_arguments(default_values)

    # retrieve external data
    print(args)
    projects = get_projects()

    # validate user input
    if args.me:
        author = whoami()


    try:
        gitlab_branches(projects, args, author)
    except NotImplementedError as e:
        print(e)

if __name__ == '__main__':
    default_values = {}
    main(default_values)
