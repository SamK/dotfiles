#!/bin/bash

set -e
FOLDER=~/.tmp/
DAYS=60
DRY_RUN=no
PARENT=no

_DELETE="-delete"
_PRINT="-print"
VERBOSE=1

# errors
E_OK=0
E_ERR=1
E_ARG=2

function echo_warn () {
    # echo warnings
    >&2 echo "[WARN] $*"
}

function echo_fatal() {
    # echo fatalities
    >&2 echo "[FATAL] $*"
}

function echo_info () {
    # print things on screen
    if [ "$VERBOSE" -ge "1" ]; then
        echo "[INFO] $*"
    fi
}

function echo_verbose () {
    # echo when verbose
    if [ "$VERBOSE" -ge "2" ]; then
        echo "[DEBUG] $*"
    fi
}


function display_help(){
    cat <<EOF
tmpclean - cleanup your tmp folder

    Usage: $(basename "$0") [OPTIONS]

    Options:

    -h,--help           Show this help and exit
    -d,--days DAYS      Cleanup files older than DAYS days (default: $DAYS)
    -f,--folder FOLDER  The folder to cleanup (default: $FOLDER)
    -p,--parent         Delete the tmp folder too when possible
    -n,--dry-run        Enable dry-run
    -q,--quiet          Quiet mode
    -v,--verbose        Verbose mode

EOF

}

function parse_arguments () {

    while [[ $# -gt 0 ]]; do
      case $1 in
        -h|--help)
          display_help
          exit 0
          ;;
        -d|--days)
          DAYS="$2"
          shift
          shift
          ;;
        -q|--quiet)
          VERBOSE=0
          _PRINT=""
          shift
          ;;
        -v|--verbose)
          VERBOSE=2
          shift
          ;;
        -f|--folder)
          FOLDER="$2"
          shift
          ;;
        -p|--parent)
          PARENT=yes
          shift
          ;;
        -n|--dry-run)
          DRY_RUN=yes
          _DELETE=""
          shift
          ;;
        -*|--*)
          echo "Unknown option: \"$1\""
          exit 127
          ;;
        *)
          FOLDER="$1" # save positional arg
          shift # past argument
          ;;
      esac
    done

    # validation
    # DAYS: int
    # folder: existe
}

function clean_tmp () {

    if ! test -d "$FOLDER" ; then
        # There is no such folder
        # if --parent is set, then it is not a problem
        # else it IS a problem and exit.
        if [ "$PARENT" = "yes" ]; then
            echo_info "Skipping cleannig of absent folder \"${FOLDER}\"."
            return $E_OK
        else
            echo_fatal "Cannot clean \"${FOLDER}\": No such directory."
            return $E_ARG
        fi
    fi

    echo_info "Search for files in root of $FOLDER:"
    find $FOLDER -maxdepth 1 -mindepth 1 -type f -mtime +$DAYS $_PRINT $_DELETE

    echo_info "Searching for directories older than $DAYS days:"

    IFS=$(echo -en "\n\b")
    for element in $(find $FOLDER -maxdepth 1 -mindepth 1 -type d -mtime +$DAYS); do
        echo_info "Analysing ${element}..."
        R=$(find "$element"  -mtime -$DAYS -o -mtime $DAYS | wc -l)
        if [ "$R" = "0" ]; then
            echo_info "Deleting ${element}..."
            find $element -mtime +$DAYS $_PRINT $_DELETE
        else
            echo_info "Skipping ${element}"
        fi
    done

    if [ "$PARENT" = "yes" ]; then
        find $FOLDER -maxdepth 0 -mindepth 0 -type d -empty -mtime +$DAYS $_PRINT $_DELETE
    fi
}

function main(){
    parse_arguments $*
    echo_verbose "VERBOSITY: $VERBOSE"
    echo_verbose "FOLDER: $FOLDER"
    echo_verbose "DAYS: $DAYS"
    echo_verbose "DRY-RUN: $DRY_RUN"
    clean_tmp
}

main $*
